{"version":3,"sources":["logo.svg","components/Corgi.jsx","components/Unicorn.jsx","components/PlayerTracker.jsx","components/Box.jsx","components/GameBoard.jsx","components/WinnerAnnouncement.jsx","App.js","hooks/useGameState.js","serviceWorker.js","index.js"],"names":["module","exports","Corgi","className","src","alt","Unicorn","PlayerTracker","props","gameState","unicornTurn","winnerAnnouncement","Box","handleBoxClick","console","log","turn","boxImage","gameBoard","id","display","updateGameBoard","updatedGameBoard","slice","currentPlayer","image","onClick","event","setGameState","prev","GameBoard","winner","useEffect","score","unicorn","corgi","map","index","key","WinnerAnnouncement","App","useState","useGameState","gameBoardReset","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+IAAAA,EAAOC,QAAU,IAA0B,kC,qHCE5B,SAASC,IAEtB,OACE,yBAAKC,UAAU,aAAaC,IAAI,0BAA0BC,IAAI,UCHnD,SAASC,IAEtB,OAEE,yBAAKH,UAAU,aAAaC,IAAI,yDAAyDC,IAAI,Y,WCDlF,SAASE,EAAeC,GAKrC,OACE,yBAAKL,UAAU,kBACmB,IAAhCK,EAAMC,UAAUC,aAA+D,OAAvCF,EAAMC,UAAUE,oBAAgC,yBAAKR,UAAU,uBAAsB,sDAA8B,kBAACG,EAAD,QAC3H,IAAhCE,EAAMC,UAAUC,aAAgE,OAAvCF,EAAMC,UAAUE,oBAAgC,yBAAKR,UAAU,uBAAsB,oDAA4B,kBAACD,EAAD,QCRjJ,SAASU,EAAKJ,GAI3B,SAASK,IAOPC,QAAQC,IAAI,sBAmCd,IAAMC,GANgC,IAAhCR,EAAMC,UAAUC,YAetB,IAAMO,EAN+C,MAAhDT,EAAMC,UAAUS,UAAUV,EAAMW,IAAIC,QAC9B,kBAACd,EAAD,MACkD,MAAhDE,EAAMC,UAAUS,UAAUV,EAAMW,IAAIC,QACtC,kBAAClB,EAAD,WADF,EAMT,SAASmB,IAEP,IAAIC,EAAmBd,EAAMC,UAAUS,UAAUK,QAC7CC,EAAgBhB,EAAMC,UAAUC,YAAc,IAAM,IAGxD,OAFAI,QAAQC,IAAI,mBAAoBS,GAChCF,EAAiBd,EAAMW,IAAvB,2BAAiCG,EAAiBd,EAAMW,KAAxD,IAA6DC,QAASI,IAC/DF,EAIT,OACE,6BACmB,MAAhBd,EAAMiB,OAAiB,4BAAQtB,UAAU,YAAYuB,QAAS,SAAAC,GAAK,OAAGd,MAAkB,kBAACP,EAAD,OACxE,MAAhBE,EAAMiB,OAAiB,4BAAQtB,UAAU,YAAYuB,QAAS,SAAAC,GAAK,OAAGd,MAAkB,kBAACX,EAAD,OACxE,MAAhBM,EAAMiB,OAAiB,4BAAQtB,UAAU,YAAYuB,QAAS,SAAAC,GAAK,OAAInB,EAAMoB,cAAa,SAAAC,GAAS,OAAO,2BAAIA,GAAX,IAAiBnB,YAAaM,EAAME,UAAWG,WAAuBJ,ICxEjK,SAASa,EAAWtB,GAuHjC,IAAIuB,EAgBJ,OAdAC,qBAAU,WACRlB,QAAQC,IAAI,wBAzGZD,QAAQC,IAAI,yBAGiC,MAAzCP,EAAMC,UAAUS,UAAU,GAAGE,SAA4D,MAAzCZ,EAAMC,UAAUS,UAAU,GAAGE,SAA4D,MAAzCZ,EAAMC,UAAUS,UAAU,GAAGE,UAElF,MAAzCZ,EAAMC,UAAUS,UAAU,GAAGE,SAA4D,MAAzCZ,EAAMC,UAAUS,UAAU,GAAGE,SAM7B,MAAzCZ,EAAMC,UAAUS,UAAU,GAAGE,SAA4D,MAAzCZ,EAAMC,UAAUS,UAAU,GAAGE,SAGpC,MAAzCZ,EAAMC,UAAUS,UAAU,GAAGE,SAA4D,MAAzCZ,EAAMC,UAAUS,UAAU,GAAGE,UALtFZ,EAAMoB,cAAa,SAAAC,GAAS,OAAO,2BAAIA,GAAX,IAAiBI,MAAO,CAACC,QAASL,EAAKI,MAAMC,QAAU,EAAGC,MAAON,EAAKI,MAAME,OAAQxB,mBAAoB,SAY3F,MAAzCH,EAAMC,UAAUS,UAAU,GAAGE,SAA4D,MAAzCZ,EAAMC,UAAUS,UAAU,GAAGE,SAA4D,MAAzCZ,EAAMC,UAAUS,UAAU,GAAGE,UAElF,MAAzCZ,EAAMC,UAAUS,UAAU,GAAGE,SAA4D,MAAzCZ,EAAMC,UAAUS,UAAU,GAAGE,SAG/EN,QAAQC,IAAI,aACZP,EAAMoB,cAAa,SAAAC,GAAS,OAAO,2BAAIA,GAAX,IAAiBI,MAAO,CAACC,QAASL,EAAKI,MAAMC,QAASC,MAAON,EAAKI,MAAME,MAAQ,GAAIxB,mBAAoB,WAElF,MAAzCH,EAAMC,UAAUS,UAAU,GAAGE,SAA4D,MAAzCZ,EAAMC,UAAUS,UAAU,GAAGE,SAGpC,MAAzCZ,EAAMC,UAAUS,UAAU,GAAGE,SAA4D,MAAzCZ,EAAMC,UAAUS,UAAU,GAAGE,UAFtFZ,EAAMoB,cAAa,SAAAC,GAAS,OAAO,2BAAIA,GAAX,IAAiBI,MAAO,CAACC,QAASL,EAAKI,MAAMC,QAASC,MAAON,EAAKI,MAAME,MAAQ,GAAIxB,mBAAoB,UAS3F,MAAzCH,EAAMC,UAAUS,UAAU,GAAGE,SAA4D,MAAzCZ,EAAMC,UAAUS,UAAU,GAAGE,SAA4D,MAAzCZ,EAAMC,UAAUS,UAAU,GAAGE,UAElF,MAAzCZ,EAAMC,UAAUS,UAAU,GAAGE,SAA4D,MAAzCZ,EAAMC,UAAUS,UAAU,GAAGE,SAK7B,MAAzCZ,EAAMC,UAAUS,UAAU,GAAGE,SAA4D,MAAzCZ,EAAMC,UAAUS,UAAU,GAAGE,SAGpC,MAAzCZ,EAAMC,UAAUS,UAAU,GAAGE,SAA4D,MAAzCZ,EAAMC,UAAUS,UAAU,GAAGE,UALtFZ,EAAMoB,cAAa,SAAAC,GAAS,OAAO,2BAAIA,GAAX,IAAiBI,MAAO,CAACC,QAASL,EAAKI,MAAMC,QAAU,EAAGC,MAAON,EAAKI,MAAME,OAAQxB,mBAAoB,SAY3F,MAAzCH,EAAMC,UAAUS,UAAU,GAAGE,SAA4D,MAAzCZ,EAAMC,UAAUS,UAAU,GAAGE,SAA4D,MAAzCZ,EAAMC,UAAUS,UAAU,GAAGE,UAElF,MAAzCZ,EAAMC,UAAUS,UAAU,GAAGE,SAA4D,MAAzCZ,EAAMC,UAAUS,UAAU,GAAGE,SAK7B,MAAzCZ,EAAMC,UAAUS,UAAU,GAAGE,SAA4D,MAAzCZ,EAAMC,UAAUS,UAAU,GAAGE,SAGpC,MAAzCZ,EAAMC,UAAUS,UAAU,GAAGE,SAA4D,MAAzCZ,EAAMC,UAAUS,UAAU,GAAGE,UALtFZ,EAAMoB,cAAa,SAAAC,GAAS,OAAO,2BAAIA,GAAX,IAAiBI,MAAO,CAACC,QAASL,EAAKI,MAAMC,QAASC,MAAON,EAAKI,MAAME,MAAQ,GAAIxB,mBAAoB,SAY3F,MAAzCH,EAAMC,UAAUS,UAAU,GAAGE,UACc,MAAzCZ,EAAMC,UAAUS,UAAU,GAAGE,SAA4D,MAAzCZ,EAAMC,UAAUS,UAAU,GAAGE,SAG7B,MAAzCZ,EAAMC,UAAUS,UAAU,GAAGE,SAA4D,MAAzCZ,EAAMC,UAAUS,UAAU,GAAGE,UAFtFZ,EAAMoB,cAAa,SAAAC,GAAS,OAAO,2BAAIA,GAAX,IAAiBI,MAAO,CAACC,QAASL,EAAKI,MAAMC,QAAU,EAAGC,MAAON,EAAKI,MAAME,OAAQxB,mBAAoB,SA+BxIoB,OAtB6C,MAAzCvB,EAAMC,UAAUS,UAAU,GAAGE,UACc,MAAzCZ,EAAMC,UAAUS,UAAU,GAAGE,SAA4D,MAAzCZ,EAAMC,UAAUS,UAAU,GAAGE,SAG7B,MAAzCZ,EAAMC,UAAUS,UAAU,GAAGE,SAA4D,MAAzCZ,EAAMC,UAAUS,UAAU,GAAGE,UAFtFZ,EAAMoB,cAAa,SAAAC,GAAS,OAAO,2BAAIA,GAAX,IAAiBI,MAAO,CAACC,QAASL,EAAKI,MAAMC,QAASC,MAAON,EAAKI,MAAME,MAAQ,GAAIxB,mBAAoB,YAqBvI,CAACH,EAAMC,UAAUS,YAEpBJ,QAAQC,IAAI,YAAagB,GAUvB,yBAAK5B,UAAU,aAWb,yBAAKA,UAAU,oBACdK,EAAMC,UAAUS,UAAUkB,KAAI,YAAuB,IAArBC,EAAoB,EAApBA,MAAOjB,EAAa,EAAbA,QAEtC,MAAgB,MAAZA,GAEmB,MAAZA,GAEY,MAAZA,EAHD,kBAACR,EAAD,CAAKa,MAAOL,EAASkB,IAAKD,EAAOlB,GAAKkB,EAAO5B,UAAWD,EAAMC,UAAWmB,aAAcpB,EAAMoB,eAM/F,0CC7JD,SAASW,EAAoB/B,GAG1C,OACE,yBAAKL,UAAU,iBACyB,MAAvCK,EAAMC,UAAUE,oBAA8B,6BAAK,uDAA+B,kBAACL,EAAD,OAC3C,MAAvCE,EAAMC,UAAUE,oBAA8B,6BAAK,qDAA6B,kBAACT,EAAD,QC4DtEsC,MA3Df,WAAgB,IAAD,ECRA,WAA0B,IAAD,EAEJC,mBAAS,CAAC/B,aAAa,EACbQ,UAAW,CAAC,CAACmB,MAAO,EAAGjB,QAAS,KACpB,CAACiB,MAAO,EAAGjB,QAAS,KACpB,CAACiB,MAAO,EAAGjB,QAAS,KACpB,CAACiB,MAAO,EAAGjB,QAAS,KACpB,CAACiB,MAAO,EAAGjB,QAAS,KACpB,CAACiB,MAAO,EAAGjB,QAAS,KACpB,CAACiB,MAAO,EAAGjB,QAAS,KACpB,CAACiB,MAAO,EAAGjB,QAAS,KACpB,CAACiB,MAAO,EAAGjB,QAAS,MAChCa,MAAO,CAACC,QAAS,EAAGC,MAAO,GAC3BxB,mBAAoB,OAb1B,mBAkBtC,MAAO,CACLF,UAnBoC,KAoBpCmB,aApBoC,MDUJc,GAA3BjC,EAFM,EAENA,UAAWmB,EAFL,EAEKA,aAEZe,EAAiB,CAAC,CAACN,MAAO,EAAGjB,QAAS,KAC5C,CAACiB,MAAO,EAAGjB,QAAS,KACpB,CAACiB,MAAO,EAAGjB,QAAS,KACpB,CAACiB,MAAO,EAAGjB,QAAS,KACpB,CAACiB,MAAO,EAAGjB,QAAS,KACpB,CAACiB,MAAO,EAAGjB,QAAS,KACpB,CAACiB,MAAO,EAAGjB,QAAS,KACpB,CAACiB,MAAO,EAAGjB,QAAS,KACpB,CAACiB,MAAO,EAAGjB,QAAS,MAIpB,OACE,yBAAKjB,UAAU,OACb,4BAAQA,UAAU,cAEhB,qEAMF,8BAKE,yBAAKA,UAAU,mBACb,6BACoC,OAAjCM,EAAUE,oBAA+B,kBAACJ,EAAD,CAAeE,UAAWA,EAAWmB,aAAcA,IAC3D,OAAjCnB,EAAUE,oBAA+B,kBAAC4B,EAAD,CAAoB9B,UAAWA,EAAWmB,aAAcA,KAEpG,6BACE,qDAA0B,8BAAOnB,EAAUwB,MAAMC,SAAjD,WAAwE,8BAAOzB,EAAUwB,MAAME,QAC/F,4BAAQT,QAAS,SAAAC,GAAK,OAAIC,GAAa,SAAAC,GAAS,OAAO,2BAAIA,GAAX,IAAiBI,MAAO,CAACC,QAAS,EAAGC,MAAM,UAA3F,oBACA,4BAAQT,QAAS,SAAAC,GAAK,OAAIC,GAAa,SAAAC,GAAS,OAAO,2BAAIA,GAAX,IAAiBX,UAAWyB,EAAgBhC,mBAAoB,YAAhH,iBAQJ,kBAACmB,EAAD,CAAWrB,UAAWA,EAAWmB,aAAcA,KAGjD,gCACE,gEElDYgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.431788ff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\n\nexport default function Corgi () {\n\n  return (\n    <img className=\"playerIcon\" src=\"../images/corgicorn.png\" alt=\"Corgi\" />\n  )\n\n}","import React from 'react'\n\nexport default function Unicorn () {\n\n  return (\n    // <img className=\"playerIcon\" src=\"../images/unicorn.png\" alt=\"Unicorn\" />\n    <img className=\"playerIcon\" src=\"https://sarairving.github.io/public/images/unicorn.png\" alt=\"Unicorn\" />\n  )\n\n}","import React from 'react';\nimport Corgi from './Corgi';\nimport Unicorn from './Unicorn';\nimport useGameState from '../hooks/useGameState';\n\nexport default function PlayerTracker (props) {\n\n  //const {gameState, setGameState} = useGameState();\n\n\n  return (\n    <div className=\"playerWrapper\">\n    {(props.gameState.unicornTurn === true && props.gameState.winnerAnnouncement === null) && <div className=\"insidePlayerWrapper\"><p>IT'S THE UNICORNS TURN!</p><Unicorn/></div>}\n    {(props.gameState.unicornTurn === false && props.gameState.winnerAnnouncement === null) && <div className=\"insidePlayerWrapper\"><p>IT'S THE CORGIS TURN!</p><Corgi/></div>}\n  </div>\n  )\n\n}\n\n","import React, {useEffect} from 'react';\nimport Corgi from './Corgi';\nimport Unicorn from './Unicorn';\nimport useGameState from '../hooks/useGameState';\n\nexport default function Box (props) {\n\n  //const {gameState, setGameState} = useGameState();\n\n  function handleBoxClick () {\n    // if (props.image === \"U\") {\n    //   return <Unicorn/>\n    // } else if (props.image === \"N\") {\n    //   return null;\n    // }\n\n    console.log(\"YOU clicked a BOX!\")\n    //console.log(\"unicornTurn before setState is = \", gameState.unicornTurn)\n\n    // useEffect(() => {\n    //   setGameState(prev => {return {...prev, unicornTurn: false, score: {unicorn: 7, corgi:7}}})\n\n    // })\n    // if (gameState.unicornTurn === true) {\n    //   setGameState(prev => {return {...prev, unicornTurn: false, score: {unicorn: 7, corgi:7}}})\n    // } else if (gameState.unicornTurn === false) {\n      \n    //     setGameState(prev => {return {...prev, unicornTurn: true, score: {unicorn: 6, corgi:6}}})\n      \n    // }\n\n    \n  \n    //console.log(\"unicornTurn after setState is = \", gameState.unicornTurn)\n\n    // if (gameState.unicornTurn) {\n    //   return <Unicorn/>\n    // }\n   \n    \n\n\n  }\n\n  function determineTurn () {\n    if (props.gameState.unicornTurn === true) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  const turn = determineTurn();\n  \n  function determineBoxImage () {\n    if(props.gameState.gameBoard[props.id].display === \"U\") {\n      return <Unicorn/>;\n    } else if (props.gameState.gameBoard[props.id].display === \"C\") {\n      return <Corgi/>;\n    } \n  }\n  const boxImage = determineBoxImage();\n\n  function updateGameBoard() {\n    //get the current gameBoar\n    let updatedGameBoard = props.gameState.gameBoard.slice();\n    let currentPlayer = props.gameState.unicornTurn ? \"U\" : \"C\";\n    console.log('currnetPlayer = ', currentPlayer)\n    updatedGameBoard[props.id] = {...updatedGameBoard[props.id], display: currentPlayer}\n    return updatedGameBoard;\n  }\n\n  \n  return (\n    <div>\n      {props.image === \"U\" && <button className=\"boxButton\" onClick={event =>handleBoxClick()}><Unicorn/></button>}\n      {props.image === \"C\" && <button className=\"boxButton\" onClick={event =>handleBoxClick()}><Corgi/></button>}\n      {props.image === \"N\" && <button className=\"boxButton\" onClick={event => props.setGameState(prev => {return {...prev, unicornTurn: turn, gameBoard: updateGameBoard()}})}>{boxImage}</button>}\n    </div>\n  \n  )\n\n\n}","import React, { useEffect } from 'react'\nimport Box from './Box'\nimport useGameState from '../hooks/useGameState';\n\nexport default function GameBoard (props) {\n\n  // let boardArray = [[\"U\", \"U\", \"N\"], [\"N\", \"N\", \"N\"], [\"N\", \"N\", \"N\"]]\n  // let noNestArray = [\"U\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\"];\n\n  //const {gameState, setGameState} = useGameState();\n\n  //need to work out how to give each Box an individual key that we can use to relate it with the index of the letter that it represents in the gameBoard array in state, maybe make game board array an array of objects with key value pairs of a numerical key and a alphabetical value??\n\n\n\n  function determineWinner() {\n    //consider putting this function inside a useEffect that runs based on any changes to the gameBoard array in gameState????\n\n    // given each box that is clicked, evaluate all possible ways it could win\n    //ROWS:\n    // if it's in the first column, are the next two consecutive indexs also the same image? \n    console.log(\"DETERMINE WINNER RUNS\")\n\n    //determine horizontal unicorn win options\n    if (props.gameState.gameBoard[0].display === \"U\" || props.gameState.gameBoard[3].display === \"U\" || props.gameState.gameBoard[6].display === \"U\") {\n      \n      if (props.gameState.gameBoard[1].display === \"U\" && props.gameState.gameBoard[2].display === \"U\") {\n        //console.log(\"IN THE RETURN UNICORN WINS\")\n        //props.setGameState(prev => {return {...prev, score: {unicorn: 2, corgi: 0}}})\n        //console.log(\"IN HORIZONTAL UNI WINNER before setState call\")\n        props.setGameState(prev => {return {...prev, score: {unicorn: prev.score.unicorn + 1, corgi: prev.score.corgi}, winnerAnnouncement: \"U\"}})\n        //return \"unicorn wins\"\n      } else if (props.gameState.gameBoard[4].display === \"U\" && props.gameState.gameBoard[5].display === \"U\") {\n        props.setGameState(prev => {return {...prev, score: {unicorn: prev.score.unicorn + 1, corgi: prev.score.corgi}, winnerAnnouncement: \"U\"}})\n        //return \"unicorn wins\";\n      } else if (props.gameState.gameBoard[7].display === \"U\" && props.gameState.gameBoard[8].display === \"U\") {\n        props.setGameState(prev => {return {...prev, score: {unicorn: prev.score.unicorn + 1, corgi: prev.score.corgi}, winnerAnnouncement: \"U\"}})\n        //return \"unicorn wins\";\n      }\n    }\n\n    //determine horizontal corgi win options\n    if (props.gameState.gameBoard[0].display === \"C\" || props.gameState.gameBoard[3].display === \"C\" || props.gameState.gameBoard[6].display === \"C\") {\n      \n      if (props.gameState.gameBoard[1].display === \"C\" && props.gameState.gameBoard[2].display === \"C\") {\n        //console.log(\"IN THE RETURN UNICORN WINS\")\n        //props.setGameState(prev => {return {...prev, score: {unicorn: 2, corgi: 0}}})\n        console.log(\"WERE HERE\")\n        props.setGameState(prev => {return {...prev, score: {unicorn: prev.score.unicorn, corgi: prev.score.corgi + 1}, winnerAnnouncement: \"C\"}})\n        //return \"corgi wins\"\n      } else if (props.gameState.gameBoard[4].display === \"C\" && props.gameState.gameBoard[5].display === \"C\") {\n        props.setGameState(prev => {return {...prev, score: {unicorn: prev.score.unicorn, corgi: prev.score.corgi + 1}, winnerAnnouncement: \"C\"}})\n        //return \"corgi wins\";\n      } else if (props.gameState.gameBoard[7].display === \"C\" && props.gameState.gameBoard[8].display === \"C\") {\n        props.setGameState(prev => {return {...prev, score: {unicorn: prev.score.unicorn, corgi: prev.score.corgi + 1}, winnerAnnouncement: \"C\"}})\n        //return \"corgi wins\";\n      }\n    }\n\n    //determine vertical unicorn win options\n    if (props.gameState.gameBoard[0].display === \"U\" || props.gameState.gameBoard[1].display === \"U\" || props.gameState.gameBoard[2].display === \"U\") {\n      \n      if (props.gameState.gameBoard[3].display === \"U\" && props.gameState.gameBoard[6].display === \"U\") {\n        //console.log(\"IN THE RETURN UNICORN WINS\")\n        //props.setGameState(prev => {return {...prev, score: {unicorn: 2, corgi: 0}}})\n        props.setGameState(prev => {return {...prev, score: {unicorn: prev.score.unicorn + 1, corgi: prev.score.corgi}, winnerAnnouncement: \"U\"}})\n        //return \"unicorn wins\"\n      } else if (props.gameState.gameBoard[4].display === \"U\" && props.gameState.gameBoard[7].display === \"U\") {\n        props.setGameState(prev => {return {...prev, score: {unicorn: prev.score.unicorn + 1, corgi: prev.score.corgi}, winnerAnnouncement: \"U\"}})\n        //return \"unicorn wins\";\n      } else if (props.gameState.gameBoard[5].display === \"U\" && props.gameState.gameBoard[8].display === \"U\") {\n        props.setGameState(prev => {return {...prev, score: {unicorn: prev.score.unicorn + 1, corgi: prev.score.corgi}, winnerAnnouncement: \"U\"}})\n        //return \"unicorn wins\";\n      }\n    }\n\n    //determine vertical corgi win options\n    if (props.gameState.gameBoard[0].display === \"C\" || props.gameState.gameBoard[1].display === \"C\" || props.gameState.gameBoard[2].display === \"C\") {\n      \n      if (props.gameState.gameBoard[3].display === \"C\" && props.gameState.gameBoard[6].display === \"C\") {\n        //console.log(\"IN THE RETURN UNICORN WINS\")\n        //props.setGameState(prev => {return {...prev, score: {unicorn: 2, corgi: 0}}})\n        props.setGameState(prev => {return {...prev, score: {unicorn: prev.score.unicorn, corgi: prev.score.corgi + 1}, winnerAnnouncement: \"C\"}})\n        //return \"corgi wins\"\n      } else if (props.gameState.gameBoard[4].display === \"C\" && props.gameState.gameBoard[7].display === \"C\") {\n        props.setGameState(prev => {return {...prev, score: {unicorn: prev.score.unicorn, corgi: prev.score.corgi + 1}, winnerAnnouncement: \"C\"}})\n        //return \"corgi wins\";\n      } else if (props.gameState.gameBoard[5].display === \"C\" && props.gameState.gameBoard[8].display === \"C\") {\n        props.setGameState(prev => {return {...prev, score: {unicorn: prev.score.unicorn, corgi: prev.score.corgi + 1}, winnerAnnouncement: \"C\"}})\n        //return \"corgi wins\";\n      }\n    }\n\n    //determine diagonal unicorn win options\n    if (props.gameState.gameBoard[4].display === \"U\") {\n      if (props.gameState.gameBoard[0].display === \"U\" && props.gameState.gameBoard[8].display === \"U\") {\n        props.setGameState(prev => {return {...prev, score: {unicorn: prev.score.unicorn + 1, corgi: prev.score.corgi}, winnerAnnouncement: \"U\"}})\n        //return \"unicorn wins\";\n      } else if (props.gameState.gameBoard[2].display === \"U\" && props.gameState.gameBoard[6].display === \"U\") {\n        props.setGameState(prev => {return {...prev, score: {unicorn: prev.score.unicorn + 1, corgi: prev.score.corgi}, winnerAnnouncement: \"U\"}})\n        //return \"unicorn wins\";\n      }\n    }\n\n    //determine diagonal corgi win options\n    if (props.gameState.gameBoard[4].display === \"C\") {\n      if (props.gameState.gameBoard[0].display === \"C\" && props.gameState.gameBoard[8].display === \"C\") {\n        props.setGameState(prev => {return {...prev, score: {unicorn: prev.score.unicorn, corgi: prev.score.corgi + 1}, winnerAnnouncement: \"C\"}})\n        //return \"corgi wins\";\n      } else if (props.gameState.gameBoard[2].display === \"C\" && props.gameState.gameBoard[6].display === \"C\") {\n        props.setGameState(prev => {return {...prev, score: {unicorn: prev.score.unicorn, corgi: prev.score.corgi + 1}, winnerAnnouncement: \"C\"}})\n        //return \"corgi wins\";\n      }\n    }\n\n\n\n    //return \"no one wins\"\n    \n    \n\n  }\n\n  let winner;\n\n  useEffect(() => {\n    console.log(\"INSIDE THE USEEFFECT\")\n    winner = determineWinner();\n  }, [props.gameState.gameBoard])\n\n  console.log('winner = ', winner)\n\n  //let winner = determineWinner();\n  \n  // if (winner === \"unicorn wins\") {\n  //   const currentUniScore = props.gameState.score.unicorn + 1;\n  //   props.setGameState(prev => {return {...prev, score: {unicorn: currentUniScore, corgi: prev.score.corgi}}})\n  // }\n\n  return (\n    <div className=\"gameBoard\">\n      {/* <div className=\"winnerAnnouncementWrapper\">\n        {console.log(\"what is winner = \", winner)}\n      {winner === \"unicorn wins\" && <h2>UNICORN WINS!!!!</h2>}\n      {winner === \"corgi wins\" && <h2>CORGI WINS!!!!</h2>}\n      {winner === \"no one wins\" && <h2>LOSERS!!!!</h2>}\n      {props.gameState.winnerAnnouncement === null && <p>IT's NULL!</p>}\n      {props.gameState.winnerAnnouncement === \"U\" && <p>IT's a Unicorn winner!</p>}\n      {props.gameState.winnerAnnouncement === \"C\" && <p>IT's a Corgicorn winner!</p>}\n      </div> */}\n   \n      <div className=\"gameBoardWrapper\">\n      {props.gameState.gameBoard.map(({index, display}) => {\n        \n        if (display === \"U\") {\n          return (<Box image={display} key={index} id ={index} gameState={props.gameState} setGameState={props.setGameState}></Box>)\n        } else if (display === \"N\") {\n          return (<Box image={display} key={index} id ={index} gameState={props.gameState} setGameState={props.setGameState}></Box>)\n        } else if (display === \"C\") {\n          return (<Box image={display} key={index} id ={index} gameState={props.gameState} setGameState={props.setGameState}></Box>)\n        }\n        return (<p>A ROW!</p>)\n       \n    })}\n    </div>\n    </div>\n    \n  )\n\n\n}","import React from 'react';\nimport Corgi from './Corgi';\nimport Unicorn from './Unicorn';\n\nexport default function WinnerAnnouncement (props) {\n\n\n  return (\n    <div className=\"winnerWrapper\">\n    {props.gameState.winnerAnnouncement === \"U\" && <div><p>UNICORN wins this round!</p><Unicorn/></div>}\n    {props.gameState.winnerAnnouncement === \"C\" && <div><p>CORGI wins this round!</p><Corgi/></div>}\n  </div>\n\n  )\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Corgi from './components/Corgi';\nimport Unicorn from './components/Unicorn';\nimport PlayerTracker from './components/PlayerTracker';\nimport Box from './components/Box';\nimport GameBoard from './components/GameBoard';\nimport useGameState from './hooks/useGameState';\nimport WinnerAnnouncement from './components/WinnerAnnouncement';\n\nfunction App() {\n\n  const {gameState, setGameState} = useGameState();\n\n  const gameBoardReset = [{index: 0, display: \"N\"}, \n  {index: 1, display: \"N\"}, \n  {index: 2, display: \"N\"}, \n  {index: 3, display: \"N\"}, \n  {index: 4, display: \"N\"}, \n  {index: 5, display: \"N\"}, \n  {index: 6, display: \"N\"}, \n  {index: 7, display: \"N\"}, \n  {index: 8, display: \"N\"}];\n\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n        <p>\n          Tick Tack Toe: Unicorn vs. Corgicorn!\n        </p>\n      \n      </header>\n      \n      <body>\n        {/* <div>\n          {gameState.unicornTurn && <p>IT'S THE UNICORNS TURN!</p>}\n          {gameState.unicornTurn === false && <p>IT'S THE CORGIS TURN!</p>}\n        </div> */}\n        <div className=\"gameBoardTopper\">\n          <div>\n            {gameState.winnerAnnouncement === null && <PlayerTracker gameState={gameState} setGameState={setGameState}/>}\n            {gameState.winnerAnnouncement !== null && <WinnerAnnouncement gameState={gameState} setGameState={setGameState}/>}\n          </div>\n          <div>\n            <p>The Score is: Unicorn: <span>{gameState.score.unicorn}</span> Corgi: <span>{gameState.score.corgi}</span></p>\n            <button onClick={event => setGameState(prev => {return {...prev, score: {unicorn: 0, corgi:0}}})}>RESET THE SCORE!</button>\n            <button onClick={event => setGameState(prev => {return {...prev, gameBoard: gameBoardReset, winnerAnnouncement: null}})}>Play Again!</button>\n          </div>\n      \n          {/* <Corgi/>\n          <Unicorn/> */}\n        </div>\n        \n        \n        <GameBoard gameState={gameState} setGameState={setGameState}/>\n      \n      </body>\n      <footer>\n        <p>\n          Ticking Tacky Toes since 2020.\n        </p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import { useState, useEffect } from \"react\";\n\n\nexport default function useGameState () {\n\n  const [gameState, setGameState] = useState({unicornTurn: true, \n                                              gameBoard: [{index: 0, display: \"N\"}, \n                                                          {index: 1, display: \"N\"}, \n                                                          {index: 2, display: \"N\"}, \n                                                          {index: 3, display: \"N\"}, \n                                                          {index: 4, display: \"N\"}, \n                                                          {index: 5, display: \"N\"}, \n                                                          {index: 6, display: \"N\"}, \n                                                          {index: 7, display: \"N\"}, \n                                                          {index: 8, display: \"N\"}], \n                                              score: {unicorn: 0, corgi: 0},\n                                              winnerAnnouncement: null} \n                                              );\n\n\n\n  return {\n    gameState, \n    setGameState\n  }\n\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}